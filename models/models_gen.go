// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AuthPayload struct {
	// JWT authorization token
	Token string `json:"token"`
	// Signed in user
	User *User `json:"user"`
}

type FileCollaboratorConnection struct {
	Edges    []*FileCollaboratorEdge `json:"edges"`
	Nodes    []*User                 `json:"nodes"`
	PageInfo *PageInfo               `json:"pageInfo"`
}

type FileCollaboratorEdge struct {
	Cursor     string         `json:"cursor"`
	Node       *User          `json:"node"`
	Permission FilePermission `json:"permission"`
}

type FileConnection struct {
	Edges    []*FileEdge `json:"edges"`
	Nodes    []*File     `json:"nodes"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type FileEdge struct {
	Cursor string `json:"cursor"`
	Node   *File  `json:"node"`
}

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type UserConnection struct {
	Edges    []*UserEdge `json:"edges"`
	Nodes    []*User     `json:"nodes"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type FilePermission string

const (
	FilePermissionAdmin    FilePermission = "ADMIN"
	FilePermissionMaintain FilePermission = "MAINTAIN"
	FilePermissionWrite    FilePermission = "WRITE"
	FilePermissionRead     FilePermission = "READ"
)

var AllFilePermission = []FilePermission{
	FilePermissionAdmin,
	FilePermissionMaintain,
	FilePermissionWrite,
	FilePermissionRead,
}

func (e FilePermission) IsValid() bool {
	switch e {
	case FilePermissionAdmin, FilePermissionMaintain, FilePermissionWrite, FilePermissionRead:
		return true
	}
	return false
}

func (e FilePermission) String() string {
	return string(e)
}

func (e *FilePermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilePermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilePermission", str)
	}
	return nil
}

func (e FilePermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserKind string

const (
	UserKindAdmin  UserKind = "ADMIN"
	UserKindUser   UserKind = "USER"
	UserKindBanned UserKind = "BANNED"
)

var AllUserKind = []UserKind{
	UserKindAdmin,
	UserKindUser,
	UserKindBanned,
}

func (e UserKind) IsValid() bool {
	switch e {
	case UserKindAdmin, UserKindUser, UserKindBanned:
		return true
	}
	return false
}

func (e UserKind) String() string {
	return string(e)
}

func (e *UserKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserKind", str)
	}
	return nil
}

func (e UserKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
