// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AuthPayload struct {
	// JWT authorization token
	Token string `json:"token"`
	// Signed in user
	User *User `json:"user"`
}

type FileCollaboratorConnection struct {
	Edges    []*FileCollaboratorEdge `json:"edges"`
	PageInfo *PageInfo               `json:"pageInfo"`
}

type FileCollaboratorEdge struct {
	Cursor      string          `json:"cursor"`
	Node        *User           `json:"node"`
	Permissions FilePermissions `json:"permissions"`
}

type FileConnection struct {
	Edges    []*FileEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type FileEdge struct {
	Cursor string `json:"cursor"`
	Node   *File  `json:"node"`
}

type FileTagConnection struct {
	Edges    []*FileTagEdge `json:"edges"`
	PageInfo *PageInfo      `json:"pageInfo"`
}

type FileTagEdge struct {
	Cursor string `json:"cursor"`
	Node   *Tag   `json:"node"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type TagConnection struct {
	Edges    []*TagEdge `json:"edges"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type TagEdge struct {
	Cursor string `json:"cursor"`
	Node   *Tag   `json:"node"`
}

type UserConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type FilePermissions string

const (
	FilePermissionsAdmin    FilePermissions = "ADMIN"
	FilePermissionsMaintain FilePermissions = "MAINTAIN"
	FilePermissionsWrite    FilePermissions = "WRITE"
	FilePermissionsRead     FilePermissions = "READ"
)

var AllFilePermissions = []FilePermissions{
	FilePermissionsAdmin,
	FilePermissionsMaintain,
	FilePermissionsWrite,
	FilePermissionsRead,
}

func (e FilePermissions) IsValid() bool {
	switch e {
	case FilePermissionsAdmin, FilePermissionsMaintain, FilePermissionsWrite, FilePermissionsRead:
		return true
	}
	return false
}

func (e FilePermissions) String() string {
	return string(e)
}

func (e *FilePermissions) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilePermissions(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilePermissions", str)
	}
	return nil
}

func (e FilePermissions) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserKind string

const (
	UserKindAdmin  UserKind = "ADMIN"
	UserKindUser   UserKind = "USER"
	UserKindBanned UserKind = "BANNED"
)

var AllUserKind = []UserKind{
	UserKindAdmin,
	UserKindUser,
	UserKindBanned,
}

func (e UserKind) IsValid() bool {
	switch e {
	case UserKindAdmin, UserKindUser, UserKindBanned:
		return true
	}
	return false
}

func (e UserKind) String() string {
	return string(e)
}

func (e *UserKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserKind", str)
	}
	return nil
}

func (e UserKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
